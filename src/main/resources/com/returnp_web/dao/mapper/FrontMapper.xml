<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.returnp_web.dao.mapper.FrontMapper">

	<!-- 로그인정보 조회 -->
	<select id="loginAct" parameterType="HashMap" resultType="HashMap">
		SELECT a.memberNo, a.memberName, a.memberEmail, a.memberPassword
		     , a.memberType, a.memberStatus, a.memberAuthType
		     , IFNULL(b.failureCnt,0) as failureCnt
             , c.authNumber, c.lastTime, a.memberPhone
             , NOW() as currentTime
		FROM member a
			 left outer join member_failure b on b.memberNo = a.memberNo
             left outer join auth_number c on c.memberNo = a.memberNo
		WHERE a.memberEmail = #{memberEmail}
		AND a.memberPassword = #{memberPassword}
	</select> 
	
	<!-- 추천인 정보 조회 -->
	<select id="selectRecommend" parameterType="HashMap" resultType="int">
		SELECT count(*)
		FROM member 
		WHERE memberEmail = #{recommend}
		AND memberStatus='1'
	</select> 

	<!-- 사용자 조회 -->
	<select id="selectAuthMember" parameterType="HashMap" resultType="HashMap">
		SELECT a.memberNo, a.memberName, a.memberEmail
            ,  b.authNumber
		FROM member a
         left outer join auth_number b on b.memberNo = a.memberNo
		WHERE memberEmail = #{memberEmail}
	</select> 
	
	<!-- 추천인 정보 조회 -->
	<select id="selectRecommendDetail" parameterType="HashMap" resultType="HashMap">
		SELECT memberNo, memberEmail, memberName, memberPassword, memberStatus
		FROM member 
		WHERE memberEmail = #{recommenderEmail}
		AND memberStatus != '6'
		<!-- AND isRecommender='Y' -->
	</select> 
	
	<!-- 중복 이메일 조회 -->
	<select id="selectmemberEmailDup" parameterType="HashMap" resultType="int">
		SELECT count(*)
		FROM member 
		WHERE memberEmail = #{memberEmail}
	</select> 
	
	<!-- 회원 번호 조회 -->
	<select id="selectmemberNo" parameterType="HashMap" resultType="int">
		SELECT memberNo
		FROM member 
		WHERE memberEmail = #{email}
	</select> 
	
	<!-- 로그인 실패 -->
	<insert id="updateLoginFailure">
		INSERT INTO member_failure(
			memberNo, 
			failureCnt, 
			createTime, 
			updateTime
		) 
		VALUES
		(
			#{memberNo}, 
			#{failureCnt},
			NOW(),
			NOW()
		)
		ON DUPLICATE KEY UPDATE
  			failureCnt = #{failureCnt},
		    updateTime = NOW()

	</insert> 
	
	<!-- 인증번호 생성 -->
	<insert id="updateLoginAuthNumber">
		INSERT INTO auth_number(
			memberNo, 
			authNumber, 
			lastTime,
			createTime 
		) 
		VALUES
		(
			#{memberNo}, 
			#{authNumber},
			NOW() + INTERVAL 30 MINUTE,
			NOW()
		)
 		ON DUPLICATE KEY UPDATE
  			authNumber = #{authNumber},
		    lastTime   = NOW() + INTERVAL 30 MINUTE,
		    createTime = NOW()

	</insert> 	
	
		<!-- 인증번호 삭제 -->
	<insert id="loginAuthNumberDelete">
		DELETE FROM auth_number WHERE memberNo = #{memberNo} ; 
	</insert> 

	<!-- 마이페이지 회원정보 조회 -->
	<select id="selectMypageMyinfo" parameterType="HashMap" resultType="HashMap">
		SELECT memberNo, memberName, memberEmail, memberPassword, memberPhone
		     , memberType, memberStatus, memberAuthType, createTime, recommenderNo, DATE_FORMAT(createtime, '%Y-%m-%d') as createTime2
		FROM member  
		WHERE memberNo = #{memberNo}
	</select> 
	
	<!-- 회원탈퇴 정보 조회 -->
	<select id="selectMyinfoCheck" parameterType="HashMap" resultType="HashMap">
		SELECT memberNo, memberName, memberEmail, memberPassword, memberPhone
		     , memberType, memberStatus, memberAuthType, createTime, recommenderNo
		FROM member  
		WHERE memberNo = #{memberNo}
		AND memberEmail = #{memberEmail}
	</select> 
	
	<!-- 추천인 조회 -->
	<select id="recommenderNo" parameterType="HashMap" resultType="String">
		SELECT memberEmail
		FROM member 
		WHERE memberNo = #{recommenderNo}
	</select> 
	
	<!-- 회원가입 -->
	<insert id="insertJoinAct" parameterType="HashMap">
		INSERT INTO member (
			memberName,
			memberEmail,
			memberPassword,
			memberStatus,    
			memberPhone,
			recommenderNo,
			<!-- isTerms,
			isPrivacy,
			isSpam, -->		
			regType,
			createTime,
			updateTime
		) VALUES (
			#{name},
			#{email},
			#{pwd},
			'3',
			#{phone},
			#{recommenderNo},
			<!-- #{terms},
			#{privacy},
			#{spam}, -->		
			'U',   
			NOW(),
			NOW()		
		)
	</insert> 
	
	<!-- 회원가입 Green point default-->
	<insert id="insertGreenAct" parameterType="HashMap">
		INSERT INTO green_point (
			memberNo,
			nodeType,
			nodeTypename,
			pointAmount,    
			greenPointCreateTime,
			greenPointUpdateTime,
			nodeNo
		) VALUES (
			#{memberNo},
			'1',
			'member',
			'0',
			NOW(),
			NOW(),
			'1'
		)
	</insert> 
	
	<!-- 회원가입 Red point default-->
	<insert id="insertRedAct" parameterType="HashMap">
		INSERT INTO red_point (
			memberNo,
			pointAmount,
			redPointCreateTime,
			redPointUpdateTime
		) VALUES (
			#{memberNo},
			'0',
			NOW(),
			NOW()		
		)
	</insert> 
	
	<update id="updateUser" parameterType="HashMap" >
	UPDATE member
		<set>
		<if test="memberPassword !=null and memberPassword !='' ">
			memberPassword=#{memberPassword},
		</if>
		<if test="recommenderNo !=null and recommenderNo !='' ">
			recommenderNo=#{recommenderNo},
		</if>
		<if test="memberPhone !=null and memberPhone !='' ">
			memberPhone=#{memberPhone},
		</if>
			updateTime=NOW()
		</set>
		<where>
			AND memberNo= #{memberNo}
		</where>		 
	</update>
	
	
	<update id="updateUserMemberStatus" parameterType="HashMap" >
	UPDATE member
		<set>
		memberStatus='1',
		updateTime=NOW()
		</set>
		<where>
			AND memberEmail= #{memberEmail}
		</where>		 
	</update>
	
	<!-- 중복 이메일 조회 -->
	<select id="selectEmailSignSuccessCount" parameterType="HashMap" resultType="int">
		SELECT count(*)
		FROM member 
		WHERE memberEmail = #{memberEmail}
		AND memberStatus ='1'
	</select> 
	
	<!-- 임시비밀번호 업데이트 -->
	<insert id="updateTempPw" parameterType="HashMap" >
		UPDATE member
		   SET memberPassword = #{tempPassword}
		 WHERE memberNo = #{memberNo}   
	</insert> 
	
	<!-- 이메일 조회 -->
	<select id="selectFindEmailAct" parameterType="HashMap" resultType="HashMap">
		SELECT memberNo, memberName, memberEmail, memberPassword, memberPhone
		     , memberType, memberStatus, memberAuthType, createTime, recommenderNo
		FROM member 
		WHERE memberEmail = #{memberEmail}
	</select> 
	
	<!-- 이메일 조회 -->
	<select id="selectFindUserEmailAct" parameterType="HashMap" resultType="HashMap">
		SELECT memberNo, memberName, memberEmail, memberPassword, memberPhone
		     , memberType, memberStatus, memberAuthType, createTime, recommenderNo
		FROM member 
		WHERE memberName = #{memberName}
		AND memberPhone = #{memberPhone}
	</select> 
	
	<!-- 회원 중복 가입 조회 -->
	<select id="selectMemberJoinCount" parameterType="HashMap" resultType="int">
		SELECT count(*)
		FROM member 
		WHERE memberEmail = #{memberEmail}
	</select>
	
	<!-- 회원 휴대폰 중복 가입 조회 -->
	<select id="selectMemberPhoneOverlapCount" parameterType="HashMap" resultType="int">
		SELECT count(*)
		FROM member 
		WHERE memberPhone = #{memberPhone}
	</select>
	
	<!-- 로그인 실패 -->
	<insert id="deleteLoginFailure">
		DELETE 
		FROM member_failure
		WHERE memberNo = #{memberNo}
	</insert>
	
	<!-- 회원 탈퇴 -->
	<insert id="memberOutAct">
		UPDATE member
		   SET memberStatus = #{memberStatus}
		     , updateTime   = NOW()
		 WHERE memberNo = #{memberNo}
	</insert>
	
	<select id="selectCompanyBankList" parameterType="HashMap" resultType="HashMap">
		SELECT companyBankAccountNo, bankName, bankOwnerName, bankAccount
		FROM company_bank_account
	</select> 
	
	<select id="selectCompanyBankAccount" parameterType="HashMap" resultType="HashMap">
		SELECT companyBankAccountNo, bankName, bankOwnerName, bankAccount
		FROM company_bank_account
		WHERE companyBankAccountNo = #{BankAccountNo}
	</select> 
	
	<select id="selectPolicyMembershipTransLimit" parameterType="HashMap" resultType="HashMap">
		SELECT 
				policyNo,
				regAdminNo,
				soleDistComm,
				branchComm,
				agancyComm,
				affiliateComm,
				branchRecComm,
				agancyRecComm,
				affiliateRecComm,
				customerRecCom,
				customerComm,
				pointTransRate,
				pointTransLimit,
				redPointAccRate,
				membershipTransLimit,
				gPointMovingMinLimit,
				gPointMovingMaxLimit,
				rPointMovingMinLimit,
				rPointMovingMaxLimit,
				customerRecManagerComm,
				affiliateRecManagerComm,
				agancyRecManagerComm,
				branchRecManagerComm,
				createTime
		FROM policy
		ORDER BY
   		policyNo DESC
		LIMIT 1 
	</select> 
	
	<!-- 정회원 신청 -->
	<insert id="insertMembershipRequest" parameterType="HashMap">
		INSERT INTO membership_request (
			<!-- membershipRequestNo, -->
			memberNo,
			companyBankAccountNo,
			paymentAmount,    
			paymentStatus,
			paymentType,
			regType,
			updateTime,
			createTime,
			depositor
			) VALUES (
			#{memberNo},
			#{companyBankAccountNo},
			#{paymentAmount},
			'1',
			'1',
			'U',
			NOW(),
			NOW(),
			#{memberName}			
		)
	</insert> 
	
	<!-- 마이페이지 유효성 조회 -->
	<select id="selectMypageMyinfoValidity" parameterType="HashMap" resultType="HashMap">
		SELECT memberNo, memberName, memberEmail, memberPassword, memberPhone
		     , memberType, memberStatus, memberAuthType, createTime, recommenderNo
		FROM member 
		WHERE memberNo = #{memberNo}
	</select> 
	
	<!-- 추천인 조회 -->
	<select id="selectMemberShipReq" parameterType="HashMap" resultType="int">
		SELECT count(*)
		FROM membership_request 
		WHERE memberNo = #{memberNo}
	</select>
	
	
	<!-- 회원정보 조회(email) -->
	<select id="selectUserInfoUseEmail" parameterType="HashMap" resultType="HashMap">
		SELECT memberNo, memberName, memberEmail, memberPassword, memberPhone
		     , memberType, memberStatus, memberAuthType, createTime, recommenderNo
		FROM member
		WHERE memberEmail = #{memberEmail}
	</select> 
	
	<select id="selectPointConversionTransaction" parameterType="HashMap" resultType="HashMap">
		SELECT pointConvertRequestNo
		FROM point_convert_request
		WHERE memberNo =#{memberNo}
		AND nodeType=#{nodeType}
		ORDER BY pointConvertRequestNo DESC
		LIMIT 1 
	</select> 
	
	<!-- 몰 정책 조회 -->
	<select id="selectPolicyPointTranslimit" parameterType="HashMap" resultType="HashMap">
		SELECT policyNo,
				regAdminNo,
				soleDistComm,
				branchComm,
				agancyComm,
				affiliateComm,
				branchRecComm,
				agancyRecComm,
				affiliateRecComm,
				customerRecCom,
				customerComm,
				pointTransRate,
				pointTransLimit,
				redPointAccRate,
				membershipTransLimit,
				gPointMovingMinLimit,
				gPointMovingMaxLimit,
				rPointMovingMinLimit,
				rPointMovingMaxLimit,
				customerRecManagerComm,
				affiliateRecManagerComm,
				agancyRecManagerComm,
				branchRecManagerComm,
				createTime
		FROM policy
		ORDER BY
   		policyNo DESC
		LIMIT 1 
	</select> 

	<!-- 회원 가입 여부 조회 -->
	<select id="selectMemberInfo" parameterType="HashMap" resultType="int">
		SELECT count(*)
		FROM member 
		WHERE memberEmail = #{memberEmail}
		AND memberNo != #{memberNo}
		AND memberStatus != '6'
	</select>
	
	<!-- red point 조회 -->
	<select id="selectMyRedPointMapinfo" parameterType="HashMap" resultType="HashMap">
		SELECT redPointNo, memberNo, pointAmount, redPointCreateTime, redPointUpdateTime
		FROM red_point  
		WHERE memberNo = #{memberNo}
	</select> 
	
	<!-- red point 선물받을 회원 정보 조회 -->
	<select id="selectRecipientMemberinfo" parameterType="HashMap" resultType="HashMap">
		SELECT memberNo, memberName, memberEmail, memberStatus, memberAuthType, memberPhone
		FROM member  
		WHERE memberEmail = #{memberEmail}
	</select>
	
	<!-- 추천인 조회 -->
	<select id="selectYearMonth" parameterType="HashMap" resultType="HashMap">
		SELECT left(DATE_SUB(  #{TIME},  INTERVAL 1 month  ) ,7) AS PREWMONTH 
				,left(  #{TIME},  7) AS NOWMONTH
				,left(DATE_SUB(  #{TIME},  INTERVAL -1 month  ) ,7) AS NEXTMONTH 
		FROM DUAL
	</select> 
	
	<!-- my green point 조회 -->
	<select id="selectMygreenPointInfo" parameterType="HashMap" resultType="HashMap">
		SELECT 
				greenPointNo
				,memberNo
				,nodeNo
				,nodeType
				,nodeTypeName
				,pointAmount
				,greenPointCreateTime
		FROM green_point
		WHERE memberNo = #{memberNo}
		AND nodeType = #{nodeType}
	</select> 
	
	<!-- member_auth_token 조회 -->
	<select id="selectMemberAuthToken" parameterType="HashMap" resultType="HashMap">
		SELECT 
				memberAuthTokenNo
				,memberNo
				,memberEmail
				,userAuthToken
				,createTime
				,updateTime
				,memberPhone
		FROM member_auth_token
		WHERE userAuthToken = #{userAuthToken}
		ORDER BY
   		memberAuthTokenNo DESC
		LIMIT 1 
	</select> 
	
	<select id="getMemberAuthToken" parameterType="HashMap" resultType="HashMap">
		SELECT 
				memberAuthTokenNo
				,memberNo
				,memberEmail
				,userAuthToken
				,createTime
				,updateTime
				,memberPhone
		FROM member_auth_token
		WHERE 1 = 1
		<if test="memberAuthTokenNo != null "> AND memberAuthTokenNo = #{memberAuthTokenNo} </if>
        <if test="memberNo !=null"> AND memberNo =  #{memberNo} </if>
        <if test="memberEmail != null"> AND memberEmail =  #{memberEmail} </if>
        <if test="userAuthToken != null"> AND userAuthToken = #{userAuthToken}</if>
        <if test="memberPhone != null"> AND memberPhone = #{memberPhone} </if> 
	</select> 
	
	<!-- member_auth_token 저장 -->
	<insert id="insertMemberAuthTokenAct" parameterType="HashMap">
		INSERT INTO member_auth_token(
			<!-- memberAuthTokenNo, -->
			memberNo,
			memberEmail,
			userAuthToken,
			createTime,
			updateTime,
			memberPhone
		)VALUES(
			#{memberNo},
			#{memberEmail},
			#{userAuthToken},
			NOW(),
			NOW(),
			#{memberPhone}	
		)
		ON DUPLICATE KEY UPDATE
  			userAuthToken = #{userAuthToken},
		    updateTime = NOW()
	</insert> 
	
	<!-- 로그인 실패 -->
	<insert id="deleteMemberAuthToken">
		DELETE 
		FROM member_auth_token
		WHERE memberNo = #{memberNo}
	</insert>
	
	<!-- qr코드 회원가입시에 휴대폰번호로 가입유무 확인 -->
	<select id="selectqrMemberPhone" parameterType="HashMap" resultType="int">
		SELECT count(*)
		FROM member 
		WHERE memberPhone = #{memberPhone}
	</select> 
	
	<!-- 로그인정보 조회 -->
	<select id="loginAppAct" parameterType="HashMap" resultType="HashMap">
		SELECT a.memberNo, a.memberName, a.memberEmail, a.memberPassword
		     , a.memberType, a.memberStatus, a.memberAuthType
		     , IFNULL(b.failureCnt,0) as failureCnt
             , c.authNumber, c.lastTime, a.memberPhone
             , NOW() as currentTime
		FROM member a
			 left outer join member_failure b on b.memberNo = a.memberNo
             left outer join auth_number c on c.memberNo = a.memberNo
		WHERE a.memberEmail = #{memberEmail}
	</select> 
	
	<!-- 가맹점 정보 조회 -->
	<select id="selectAffiliateInfo" parameterType="HashMap" resultType="HashMap">
		SELECT affiliateNo
				,affiliateSerial
				,affiliateCode
				,affiliateName
		FROM affiliate
		WHERE affiliateSerial= #{af_id} 
	</select> 
	
	<!-- 회원 휴대폰 중복 가입 조회(회원정보수정) -->
	<select id="selectMemberPhoneOverlapModfiyCount" parameterType="HashMap" resultType="int">
		SELECT count(*) 
		FROM member 
		WHERE memberPhone = #{memberPhone}
		AND memberNo != #{memberNo}
	</select>
	
	<!-- 마이페이지 정회원 신청정보 조회 -->
	<select id="selectMembershipRequestPaymentStatus" parameterType="HashMap" resultType="HashMap">
		SELECT 	memberNo
				,depositor
				,paymentType
				,paymentStatus
				,createTime
		FROM membership_request  
		WHERE memberNo = #{memberNo}
	</select> 
	
	<update id="updatePaymentStatusRequestCon" parameterType="HashMap" >
		UPDATE membership_request
		SET paymentStatus ='6'
		WHERE memberNo = #{memberNo}
		AND paymentStatus ='1'
	</update>
	
	<!-- 마이페이지 회원정보 회원타입 조회 -->
	<!--    1-일반회원 member
			2.정회원 recommender
			3. 지사 branch
			4. 대리점 agency
			5. 협력업체 affiliate
			6. 관리자 saleManager
			7. 총판 SoleDist -->
	<select id="selectmemberTypeInfo" parameterType="HashMap" resultType="HashMap">
	   SELECT
				memberNo
 				,(SELECT recommenderNo FROM recommender WHERE  memberNo = #{memberNo}) as  recommenderNo
				,(SELECT branchNo FROM branch WHERE  memberNo = #{memberNo} ) as  branchNo
				,(SELECT agencyNo FROM agency WHERE  memberNo = #{memberNo} ) as  agencyNo
				,(SELECT affiliateNo FROM affiliate WHERE  memberNo = #{memberNo} ) as  affiliateNo
				,(SELECT saleManagerNo FROM sale_manager WHERE  memberNo = #{memberNo} ) as  saleManagerNo 
				,(SELECT soleDistNo FROM sole_dist WHERE  memberNo = #{memberNo} ) as  soleDistNo
		FROM member
		WHERE memberNo = #{memberNo}
	</select>
	
	<!-- 게시글 쓰기 -->
	<insert id="insertQnaWAct" parameterType="HashMap">
		INSERT INTO board (
				boardType
				,boardName
				,boardTitle
				,boardContent
				,boardWriterNo
				,boardWriterName
				,boardWriterEmail
				,boardWriterType
				,viewHitCount
				,isPublic
				,boardPid
				,boardRef
				<!-- ,boardRef 답글 , 댓글의 원래 게시글 NOT NULL?? mobile에서는 의미가 없는 값같아요. 회신이 없으셔서 우선은 0을 넣었습니다.-->
				,boardLevel
				,boardCate
				,createTime
				,updateTime
		) VALUES (
			'3'
			,#{boardName}
			,#{boardTitle}
			,#{boardContent}
			,#{memberNo}
			,#{memberName}
			,#{memberEmail}
			,'U'
			,'0'
			,'Y'
			,'0'
			,'0' <!-- boardRef -->
			,'1' 
			,#{boardCate}
			,NOW()
			,NOW()		
		)
	</insert>

	<!-- 제휴상담 글쓰기 -->
	<insert id="insertQnaNodeWAct" parameterType="HashMap">
		INSERT INTO board (
				boardType
				,boardName
				,boardTitle
				,boardContent
				,boardWriterNo
				,boardWriterName
				,boardWriterEmail
				,boardWriterType
				,viewHitCount
				,isPublic
				,boardPid
				,boardRef
				<!-- ,boardRef 답글 , 댓글의 원래 게시글 NOT NULL?? mobile에서는 의미가 없는 값같아요. 회신이 없으셔서 우선은 0을 넣었습니다.-->
				,boardLevel
				,boardCate
				,createTime
				,updateTime
				,rerv1
				,rerv2
				,rerv3
				,rerv4
				,rerv5
				,rerv6
				,rerv7
		) VALUES (
			'4'
			,#{boardName}
			,#{boardTitle}
			,#{boardContent}
			,#{memberNo}
			,#{memberName}
			,#{memberEmail}
			,'U'
			,'0'
			,'Y'
			,'0'
			,'0' <!-- boardRef -->
			,'1' 
			,#{boardCate}
			,NOW()
			,NOW()
			,#{rerv1}
			,#{rerv2}
			,#{rerv3}
			,#{rerv4}
			,#{rerv5}
			,#{rerv6}
			,#{rerv7}		
		)
	</insert>	 
</mapper>